// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id, created, modified, name, api_key
) VALUES ( $1, $2, $3, $4, encode(sha256(random()::text::bytea), 'hex'))
RETURNING id, created, modified, name, api_key
`

type CreateUserParams struct {
	ID       uuid.UUID
	Created  time.Time
	Modified time.Time
	Name     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Created,
		arg.Modified,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Name,
		&i.ApiKey,
	)
	return i, err
}

const getUserByAPIKey = `-- name: GetUserByAPIKey :one
SELECT id, created, modified, name, api_key FROM users where api_key=$1
`

func (q *Queries) GetUserByAPIKey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAPIKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Name,
		&i.ApiKey,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created, modified, name, api_key FROM users where id=$1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Name,
		&i.ApiKey,
	)
	return i, err
}
