// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0

package main

import (
	"time"

	"github.com/google/uuid"
	"github.com/thrillee/rssagg/internal/database"
)

type User struct {
	ID       uuid.UUID `json:"id"`
	Created  time.Time `json:"created"`
	Modified time.Time `json:"modified"`
	Name     string    `json:"name"`
	APIKey   string    `json:"api_key"`
}

type Feed struct {
	ID       uuid.UUID `json:"id"`
	Created  time.Time `json:"created"`
	Modified time.Time `json:"modified"`
	Name     string    `json:"name"`
	Url      string    `json:"url"`
	UserID   uuid.UUID `json:"user_id"`
}

type FeedFollow struct {
	ID       uuid.UUID `json:"id"`
	Created  time.Time `json:"created"`
	Modified time.Time `json:"modified"`
	UserID   uuid.UUID `json:"user_id"`
	FeedID   uuid.UUID `json:"feed_id"`
}

type Post struct {
	ID          uuid.UUID `json:"id"`
	Created     time.Time `json:"created"`
	Modified    time.Time `json:"modified"`
	Title       string    `json:"title"`
	Description *string   `json:"description"`
	PublishedAt time.Time `json:"published_at"`
	Url         string    `json:"url"`
	FeedID      uuid.UUID `json:"feed_id"`
}

func databasePostToPost(dbPost database.Post) Post {
	var description *string
	if dbPost.Description.Valid {
		description = &dbPost.Description.String
	}
	return Post{
		ID:          dbPost.ID,
		Created:     dbPost.Created,
		Modified:    dbPost.Modified,
		Title:       dbPost.Title,
		Description: description,
		PublishedAt: dbPost.PublishedAt,
		Url:         dbPost.Url,
		FeedID:      dbPost.FeedID,
	}
}

func databasePostsToPosts(dbPosts []database.Post) []Post {
	posts := []Post{}

	for _, dbPost := range dbPosts {
		posts = append(posts, databasePostToPost(dbPost))
	}

	return posts
}

func databaseFeedFollowToFeedFollow(dbFeed database.FeedFollow) FeedFollow {
	return FeedFollow{
		ID:       dbFeed.ID,
		Created:  dbFeed.Created,
		Modified: dbFeed.Modified,
		UserID:   dbFeed.UserID,
		FeedID:   dbFeed.FeedID,
	}
}

func databaseFeedFollowToFeedFollows(dbFeeds []database.FeedFollow) []FeedFollow {
	feeds := []FeedFollow{}
	for _, dbFeed := range dbFeeds {
		feeds = append(feeds, databaseFeedFollowToFeedFollow(dbFeed))
	}
	return feeds
}

func databaseFeedsToFeed(dbFeeds []database.Feed) []Feed {
	feeds := []Feed{}
	for _, dbFeed := range dbFeeds {
		feeds = append(feeds, databaseFeedToFeed(dbFeed))
	}
	return feeds
}

func databaseFeedToFeed(dbFeed database.Feed) Feed {
	return Feed{
		ID:       dbFeed.ID,
		Created:  dbFeed.Created,
		Modified: dbFeed.Modified,
		Name:     dbFeed.Name,
		Url:      dbFeed.Url,
	}
}

func databaseUserToUser(dbUser database.User) User {
	return User{
		ID:       dbUser.ID,
		Created:  dbUser.Created,
		Modified: dbUser.Modified,
		Name:     dbUser.Name,
		APIKey:   dbUser.ApiKey,
	}
}
